package com.testing.two.config.rootconfig.database;

import com.testing.two.config.profiles.Profiles;
import com.testing.two.config.rootconfig.RootConfig;
import liquibase.integration.spring.SpringLiquibase;
import org.apache.tomcat.dbcp.dbcp2.BasicDataSource;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Profile;
import org.springframework.orm.jpa.vendor.Database;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
public class DataSourceConfig {
    public static final String HIBERNATE_DIALECT_PARAM = "hibernate.dialect";

    //Oracle database
    private static final String ORACLE_DIALECT = "org.hibernate.dialect.Oracle10gDialect";
    private static final String ORACLE_DRIVER_CLASS = "oracle.jdbc.OracleDriver";
    //H2 database
    private static final String H2_DIALECT = "org.hibernate.dialect.H2Dialect";
    private static final String H2_DRIVER_CLASS = "org.h2.Driver";
    //MySql database
    private static final String MYSQL_DIALECT = "org.hibernate.dialect.MySQLDialect";
    private static final String MYSQL_DRIVER_CLASS = "com.mysql.jdbc.Driver";
    //Database config
    @Value("${db.url}")
    private String databaseUrl;
    @Value("${db.username}")
    private String username;
    @Value("${db.password}")
    private String password;

    //region DataSource config
    /**
     * Creates a {@link DataSource} {@link Bean}, configured for H2 database connection</br>
     * @return created {@link DataSource}
     */
    @Bean
    @Profile(Profiles.TEST)
    public DataSource getDataSourceTest() {
        BasicDataSource dataSource = new BasicDataSource();
        dataSource.setDriverClassName(H2_DRIVER_CLASS);
        dataSource.setUrl(databaseUrl);
        dataSource.setUsername(username);
        dataSource.setPassword(password);
        return dataSource;
    }
    
    /**
     * Creates a {@link DataSource} {@link Bean}, configured for Oracle database connection</br>
     * @return created {@link DataSource}
     */
    @Bean
    @Profile({Profiles.DEV, Profiles.PROD})
    public DataSource getDataSourceDev() {
        BasicDataSource dataSource = new BasicDataSource();
        System.out.println("NOW CREATING DATASOURCE: "+databaseUrl+" "+username+" "+password);
        dataSource.setUrl(databaseUrl);
        dataSource.setDriverClassName(ORACLE_DRIVER_CLASS);
        dataSource.setUsername(username);
        dataSource.setPassword(password);
        return dataSource;
    }

    /**
     * Creates a {@link SpringLiquibase} {@link Bean}</br>
     * It is used to execute liquibase configuration of the database in accordance with the settings in the liquibase-changeLog.xml file</br>
     * The liquibase-changeLog.xml can be written manually or can be generated by maven plugin
     * @param dataSource {@link DataSource} used to connect to the database and make changes in accordance with the config in the liquibase-changeLog.xml file
     * @return
     */
    @Bean
    @Profile(Profiles.DEV)
    public SpringLiquibase liquibaseDev(DataSource dataSource) {
        SpringLiquibase liquibase = new SpringLiquibase();
        liquibase.setChangeLog("classpath:dev-diff-changeLog.xml");
        liquibase.setDataSource(dataSource);
        liquibase.setDropFirst(false);
        return liquibase;
    }
/*
    /**
     * Creates a {@link DataSource} {@link Bean}, configured for Oracle database connection</br>
     * @return created {@link DataSource}
     *
    @Bean
    @Profile(Profiles.PROD)
    public DataSource getDataSourceProd() {
        BasicDataSource dataSource = new BasicDataSource();
        dataSource.setDriverClassName(ORACLE_DRIVER_CLASS);
        dataSource.setUrl("jdbc:oracle:thin:@myotheroracledb.c5bsh8lf0usk.eu-central-1.rds.amazonaws.com:cringer");
        dataSource.setUsername("masterUsername");
        dataSource.setPassword("masterPassword123");
        return dataSource;
    }*/
    //endregion

    //region Hibernate Properties config
    @Bean
    @Qualifier("hibernateProperties")
    @Profile({Profiles.DEV,Profiles.PROD})
    public HibernateProperties getHibernatePropDevAndProd() {
        HibernateProperties properties = new HibernateProperties();

        //Configures the used database dialect. This allows Hibernate to create SQL
        //that is optimized for the used database.
        //properties.put(HIBERNATE_DIALECT_PARAM, ORACLE_DIALECT);
        properties.put(HIBERNATE_DIALECT_PARAM,ORACLE_DIALECT);

        //Specifies the action that is invoked to the database when the Hibernate SessionFactory is created or closed.
        //Set to none (default for Oracle), since creation is done by liquibase, otherwise set to create-drop
        properties.put("hibernate.hbm2ddl.auto", "none");

        //Configures the naming strategy that is used when Hibernate creates
        //new database objects and schema elements
        //Will not be used, since Hibernate will not be creating any tables, but still here for example
        properties.put("hibernate.ejb.naming_strategy","org.hibernate.cfg.ImprovedNamingStrategy");

        //If the value of this property is true, Hibernate writes all SQL
        //statements to the console.
        //TODO check if it conflicts with JpaVendorAdapter setting
        properties.put("hibernate.show_sql",true);

        //If the value of this property is true, Hibernate will format the SQL
        //that is written to the console.
        //TODO check if it conflicts with JpaVendorAdapter setting
        properties.put("hibernate.format_sql",true);

        //Specifies the database type
        //This is used when configuring the JpaVendorAdapter in SpringDataJpaConfig
        properties.setJpaDatabaseType(Database.ORACLE);

        //Configure hibernate 2nd level caching
        //Add appropriate annotations to Entities (see BaseEntity for example)
        properties.put("hibernate.cache.use_second_level_cache",true);
        properties.put("hibernate.cache.region.factory_class",org.hibernate.cache.ehcache.EhCacheRegionFactory.class);
        return properties;
    }

    @Bean
    @Qualifier("hibernateProperties")
    @Profile(Profiles.TEST)
    public HibernateProperties getHibernatePropTest() {
        HibernateProperties properties = new HibernateProperties();

        //Configures the used database dialect. This allows Hibernate to create SQL
        //that is optimized for the used database.
        properties.put(HIBERNATE_DIALECT_PARAM, H2_DIALECT);

        //Specifies the action that is invoked to the database when the Hibernate SessionFactory is created or closed.
        //Set to validate only (default anyways), since creation is done by liquibase, otherwise set to create-drop
        properties.put("hibernate.hbm2ddl.auto", "create-drop");

        //Configures the naming strategy that is used when Hibernate creates
        //new database objects and schema elements
        //Will not be used, since Hibernate will not be creating any tables, but still here for example
        properties.put("hibernate.ejb.naming_strategy","org.hibernate.cfg.ImprovedNamingStrategy");

        //If the value of this property is true, Hibernate writes all SQL
        //statements to the console.
        //TODO check if it conflicts with JpaVendorAdapter setting
        properties.put("hibernate.show_sql",true);

        //If the value of this property is true, Hibernate will format the SQL
        //that is written to the console.
        //TODO check if it conflicts with JpaVendorAdapter setting
        properties.put("hibernate.format_sql",true);

        //Specifies the database type
        //This is used when configuring the JpaVendorAdapter in SpringDataJpaConfig
        properties.setJpaDatabaseType(Database.H2);

        //Configure hibernate 2nd level caching
        //Add appropriate annotations to Entities (see BaseEntity for example)
        properties.put("hibernate.cache.use_second_level_cache",true);
        properties.put("hibernate.cache.region.factory_class",org.hibernate.cache.ehcache.EhCacheRegionFactory.class);
        return properties;
    }
    //endregion
}
